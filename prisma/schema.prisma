generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model addon {
  id            String          @id @default(cuid())
  name          String          @db.VarChar(255)
  price         Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  is_deleted    Boolean         @default(false)
  colorHex      String?         @db.VarChar(7)
  isBackground  Boolean         @default(false)
  customeraddon customeraddon[]
}

model customeraddon {
  id                  String              @id @default(cuid())
  transactionId       String
  addonId             String
  quantity            Int
  createdAt           DateTime            @default(now())
  updatedAt           DateTime
  addon               addon               @relation(fields: [addonId], references: [id], onDelete: NoAction, map: "CustomerAddon_addonId_fkey")
  customertransaction customertransaction @relation(fields: [transactionId], references: [id], onDelete: NoAction, map: "CustomerAddon_transactionId_fkey")

  @@index([addonId], map: "CustomerAddon_addonId_fkey")
  @@index([transactionId], map: "CustomerAddon_transactionId_fkey")
}

model customertransaction {
  id            String          @id @default(cuid())
  studioId      String
  voucherId     String?
  customerName  String          @db.VarChar(255)
  customerEmail String          @db.VarChar(255)
  customerPhone String          @db.VarChar(15)
  totalPrice    Int
  bookingDate   DateTime        @db.Date
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  isApproved    Boolean?
  bookingTime   Int
  customeraddon customeraddon[]
  studio        studio          @relation(fields: [studioId], references: [id], map: "CustomerTransaction_studioId_fkey")
  voucher       voucher?        @relation(fields: [voucherId], references: [id], map: "CustomerTransaction_voucherId_fkey")

  @@index([studioId], map: "CustomerTransaction_studioId_fkey")
  @@index([voucherId], map: "CustomerTransaction_voucherId_fkey")
}

model holiday {
  id          String   @id @default(cuid())
  date        DateTime @db.Date
  description String   @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model studio {
  id                  String                @id @default(cuid())
  name                String                @db.VarChar(255)
  description         String?               @db.Text
  image               String?               @db.VarChar(255)
  is_deleted          Boolean               @default(false)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  price               Int
  customertransaction customertransaction[]
}

model users {
  id        String   @id @default(cuid())
  email     String   @db.VarChar(255)
  password  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model voucher {
  id                  String                @id @default(cuid())
  name                String                @db.VarChar(255)
  discount            Decimal?              @db.Decimal(5, 2)
  count               Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  is_deleted          Boolean               @default(false)
  customertransaction customertransaction[]
}

model Channels {
  id            String          @id @default(cuid())
  code          String          @unique
  email         String?         @db.VarChar(255)
  phone         String?         @db.VarChar(255)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ChannelImages ChannelImages[]
  Results       Results[]
}

model ChannelImages {
  id         String   @id @default(cuid())
  image_url  String   @db.VarChar(255)
  public_id  String   @unique @db.VarChar(255)
  channel_id String
  channels   Channels @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Templates {
  id        String    @id @default(cuid())
  image_url String    @db.VarChar(255)
  label     String?   @db.VarChar(255)
  public_id String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  content   Json?
  Results   Results[]
}

model Results {
  id          String     @id @default(cuid())
  template_id String?
  channel_id  String?
  image_url   String     @db.VarChar(255)
  public_id   String     @db.VarChar(255)
  templates   Templates? @relation(fields: [template_id], references: [id], onDelete: Cascade)
  channels    Channels?  @relation(fields: [channel_id], references: [id], onDelete: Cascade)
}
